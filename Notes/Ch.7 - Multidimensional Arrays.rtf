{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 . To declare a variable referencing a two-dimensional array: 
\f1\b elementType[][]
\f0\b0  myArray;\
\
. Initializing a two-dimensional array would require the given number of rows, and number of columns. For example: 
\f1\b myArray = new elementType[5][5];
\f0\b0 \
\
. Accessing an element value in the two-dimensional array would require two indexes. One index for specifying the row number, and the other index for specifying the column number\
\
. Logically speaking, a two-dimensional array is a single-dimensional array with each element referencing a single-dimensional array\
\
. It is possible that a two-dimensional array where its rows have different lengths\
\
. It is possible to initialize a three-dimensional array\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 . By default, all the element values in a two-dimensional array when initialized are zero\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
. The most common way of initializing and accessing the values of a two-dimensional array is using a loop. Specifically, a for-loop from within a for-loop\
\
. Similar to passing a single-dimensional array to a method, it is also possible to pass a two-dimensional array into a method}